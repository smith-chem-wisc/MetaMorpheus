using System.Collections.Generic;
using System.IO;
using System.Linq;
using EngineLayer.ClassicSearch;
using EngineLayer.FdrAnalysis;
using EngineLayer;
using NUnit.Framework;
using Proteomics.ProteolyticDigestion;
using Proteomics;
using TaskLayer;
using UsefulProteomicsDatabases;
using IO.MzML;
using System.IO.Compression;
using MassSpectrometry;
using System.Drawing.Imaging;

namespace Test
{
    [TestFixture]
    public class ProteinParsimonyTest
    {
        [Test]
        [TestCase(true, false,24)]
        [TestCase(true, true, 23)]
        [TestCase(false, false, 24)]
        [TestCase(false, true, 23)]
        public static void FilterPsmsByPepPriorToParsimonyModPeptidesAre(bool filter, bool unique, int proteinListLineCount)
        {
            string subFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"IndividualOutputTest");
            Directory.CreateDirectory(subFolder);
            string outputFolder = Path.Combine(subFolder, "Results");
            Directory.CreateDirectory(outputFolder);
            MyFileManager myFileManager = new(true);
            var origDataFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\TaGe_SA_HeLa_04_subset_longestSeq.mzML");
            CommonParameters CommonParameters = new(digestionParams: new DigestionParams());
            MsDataFile myMsDataFile = myFileManager.LoadFile(origDataFile, CommonParameters);
            var fsp = new List<(string fileName, CommonParameters fileSpecificParameters)>();
            List<string> rawFilePathList = new();
            for (int i = 0; i < 4; i++)
            {
                string fullFilePath = Path.Combine(outputFolder, "bubba_" + i + ".mzml");
                rawFilePathList.Add(fullFilePath);
                MzmlMethods.CreateAndWriteMyMzmlWithCalibratedSpectra(myMsDataFile, fullFilePath, false);
                fsp.Add(("bubba_" + i + ".mzml", CommonParameters));
            }

            SearchTask searchTaskFilterPsms = new ();
            searchTaskFilterPsms.SearchParameters.FilterPsmsByPepForParsimony = filter;
            searchTaskFilterPsms.SearchParameters.ModPeptidesAreDifferent = unique;


            List<(string, MetaMorpheusTask)> tasks = new() { ("searchTaskFilterPsms", searchTaskFilterPsms) };
            DbForTask db = new(Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\hela_snip_for_unitTest.fasta"), false);

            new EverythingRunnerEngine(tasks, rawFilePathList, new List<DbForTask> { db }, outputFolder).Run();

            //check that the first task wrote everything fine
            HashSet<string> expectedFiles = new()
            {
                "AllPeptides.psmtsv",
                "AllPSMs.psmtsv",
                "AllPSMs_FormattedForPercolator.tab",
                "AllQuantifiedPeaks.tsv",
                "AllQuantifiedPeptides.tsv",
                "AllQuantifiedProteinGroups.tsv",
                "AutoGeneratedManuscriptProse.txt",
                "model.zip",
                "results.txt"
            };

            HashSet<string> writtenFiles = new HashSet<string>(Directory.GetFiles(Path.Combine(outputFolder, "searchTaskFilterPsms")).Select(v => Path.GetFileName(v)));
            //check they're the same
            Assert.IsTrue(!expectedFiles.Except(writtenFiles).Any());

            List<string> proteinListPlusHeader = File.ReadAllLines(Path.Combine(outputFolder, "searchTaskFilterPsms", "AllQuantifiedProteinGroups.tsv")).ToList();
            Assert.AreEqual(proteinListLineCount, proteinListPlusHeader.Count);
            Directory.Delete(subFolder, true);
        }
    }
}

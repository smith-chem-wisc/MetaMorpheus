using System.Collections.Generic;
using System.IO;
using System.Linq;
using EngineLayer;
using NUnit.Framework;
using Proteomics.ProteolyticDigestion;
using TaskLayer;
using IO.MzML;
using MassSpectrometry;
using Org.BouncyCastle.Asn1.X509;
using System.Text.RegularExpressions;
using System;

namespace Test
{

    [TestFixture]
    public class ProteinParsimonyTest
    {
        private static string outputFolder;
        private static string subFolder;
        private static string origDataFile;
        private static List<string> rawFilePathList;
        private static MsDataFile myMsDatFile;
        private static SearchTask searchTaskFilterPsms;

        [OneTimeSetUp]
        public static void GlobalSetup()
        {
            subFolder = Path.Combine(TestContext.CurrentContext.TestDirectory, @"IndividualOutputTest");
            Directory.CreateDirectory(subFolder);
            outputFolder = Path.Combine(subFolder, "Results");
            Directory.CreateDirectory(outputFolder);
            MyFileManager myFileManager = new(true);
            origDataFile = Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\TaGe_SA_HeLa_04_subset_longestSeq.mzML");
            CommonParameters CommonParameters = new(digestionParams: new DigestionParams());
            myMsDatFile = myFileManager.LoadFile(origDataFile, CommonParameters);
            var fsp = new List<(string fileName, CommonParameters fileSpecificParameters)>();
            rawFilePathList = new();

            //we're making multiple files to search because one file by itself doesn not produce enough Psms to activate Pep.
            for (int i = 0; i < 4; i++)
            {
                string fullFilePath = Path.Combine(outputFolder, "bubba_" + i + ".mzml");
                rawFilePathList.Add(fullFilePath);
                MzmlMethods.CreateAndWriteMyMzmlWithCalibratedSpectra(myMsDatFile, fullFilePath, false);
                fsp.Add(("bubba_" + i + ".mzml", CommonParameters));
            }
        }

        [OneTimeTearDown]
        public void Dispose()
        {
            Directory.Delete(subFolder, true);
        }

        [Test]
        [TestCase(true, false,24)]
        [TestCase(true, true, 23)]
        [TestCase(false, false, 24)]
        [TestCase(false, true, 23)]
        public static void FilterPsmsByPepPriorToParsimonyModPeptidesAre(bool filterPeptidesByPep, bool modPeptidesAreUniqueForThisTest, int proteinListLineCount)
        {
            searchTaskFilterPsms = new();
            searchTaskFilterPsms.SearchParameters.FilterPsmsByPepForParsimony = filterPeptidesByPep;
            searchTaskFilterPsms.SearchParameters.ModPeptidesAreDifferent = modPeptidesAreUniqueForThisTest;

            List<(string, MetaMorpheusTask)> tasks = new() { ("searchTaskFilterPsms", searchTaskFilterPsms) };
            DbForTask db = new(Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\hela_snip_for_unitTest.fasta"), false);

            new EverythingRunnerEngine(tasks, rawFilePathList, new List<DbForTask> { db }, outputFolder).Run();

            //check that the first task wrote everything fine
            HashSet<string> expectedFiles = new()
            {
                "AllPeptides.psmtsv",
                "AllPSMs.psmtsv",
                "AllPSMs_FormattedForPercolator.tab",
                "AllQuantifiedPeaks.tsv",
                "AllQuantifiedPeptides.tsv",
                "AllQuantifiedProteinGroups.tsv",
                "AutoGeneratedManuscriptProse.txt",
                "model.zip",
                "results.txt"
            };

            HashSet<string> writtenFiles = new HashSet<string>(Directory.GetFiles(Path.Combine(outputFolder, "searchTaskFilterPsms")).Select(v => Path.GetFileName(v)));
            //check they're the same
            Assert.IsTrue(!expectedFiles.Except(writtenFiles).Any());

            List<string> proteinListPlusHeader = File.ReadAllLines(Path.Combine(outputFolder, "searchTaskFilterPsms", "AllQuantifiedProteinGroups.tsv")).ToList();
            Assert.AreEqual(proteinListLineCount, proteinListPlusHeader.Count);


            List<string> results = File.ReadAllLines(Path.Combine(outputFolder, "searchTaskFilterPsms", "results.txt")).ToList();
            if (filterPeptidesByPep)
            {
                Assert.IsTrue(results.Any(l => l.Contains("All target PSMS within 1% PEP Q-value:")));
                Assert.IsTrue(results.Any(l => l.Contains("All target peptides within 1% PEP Q-value:")));
                Assert.IsTrue(results.Any(l => l.Contains("All target protein groups within 1% PEP Q-value:")));
            }
            else
            {
                Assert.IsTrue(results.Any(l => l.Contains("All target PSMS within 1% FDR:")));
                Assert.IsTrue(results.Any(l => l.Contains("All target peptides within 1% FDR:")));
                Assert.IsTrue(results.Any(l => l.Contains("All target protein groups within 1% FDR:")));
            }
        }

        [Test]
        [TestCase(true, false, true, 24)]
        public static void NotEnoughPsmsToFilterByPep(bool filterPeptidesByPep, bool modPeptidesAreUniqueForThisTest, bool doParsimony, int proteinListLineCount)
        {
            CommonParameters CommonParameters = new(digestionParams: new DigestionParams());
            var fsp = new List<(string fileName, CommonParameters fileSpecificParameters)>();
            List<string> rawFilePathList = new();

            string fullFilePath = Path.Combine(outputFolder, "bubba.mzml");
            rawFilePathList.Add(fullFilePath);
            MzmlMethods.CreateAndWriteMyMzmlWithCalibratedSpectra(myMsDatFile, fullFilePath, false);
            fsp.Add(("bubba.mzml", CommonParameters));
            
            SearchTask searchTaskFilterPsms = new();
            searchTaskFilterPsms.SearchParameters.FilterPsmsByPepForParsimony = filterPeptidesByPep;
            searchTaskFilterPsms.SearchParameters.ModPeptidesAreDifferent = modPeptidesAreUniqueForThisTest;
            searchTaskFilterPsms.SearchParameters.DoParsimony = doParsimony;


            List<(string, MetaMorpheusTask)> tasks = new() { ("searchTaskFilterPsms", searchTaskFilterPsms) };
            DbForTask db = new(Path.Combine(TestContext.CurrentContext.TestDirectory, @"TestData\hela_snip_for_unitTest.fasta"), false);

            new EverythingRunnerEngine(tasks, rawFilePathList, new List<DbForTask> { db }, outputFolder).Run();

            //check that the first task wrote everything fine
            HashSet<string> expectedFiles = new()
            {
                "AllPeptides.psmtsv",
                "AllPSMs.psmtsv",
                "AllPSMs_FormattedForPercolator.tab",
                "AllQuantifiedPeaks.tsv",
                "AllQuantifiedPeptides.tsv",
                "AllQuantifiedProteinGroups.tsv",
                "AutoGeneratedManuscriptProse.txt",
                "bubba.mzID",
                "results.txt"
            };

            HashSet<string> writtenFiles = new HashSet<string>(Directory.GetFiles(Path.Combine(outputFolder, "searchTaskFilterPsms")).Select(v => Path.GetFileName(v)));
            //check they're the same
            Assert.IsTrue(!expectedFiles.Except(writtenFiles).Any());

            //there are not enough psms to filter by 

            List<string> proteinListPlusHeader = File.ReadAllLines(Path.Combine(outputFolder, "searchTaskFilterPsms", "AllQuantifiedProteinGroups.tsv")).ToList();
            Assert.AreEqual(proteinListLineCount, proteinListPlusHeader.Count);

            List<string> results = File.ReadAllLines(Path.Combine(outputFolder, "searchTaskFilterPsms", "results.txt")).ToList();
            Assert.IsTrue(results.Any(l => l.Contains("All target PSMS within 1% FDR:")));
            Assert.IsTrue(results.Any(l => l.Contains("All target peptides within 1% FDR:")));
            Assert.IsTrue(results.Any(l => l.Contains("All target protein groups within 1% FDR:")));

            Directory.Delete(subFolder, true);
        }
    }
}

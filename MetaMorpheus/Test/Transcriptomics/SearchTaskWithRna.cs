using EngineLayer.ClassicSearch;
using EngineLayer;
using NUnit.Framework;
using Omics.Modifications;
using Omics;
using Readers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EngineLayer.DatabaseLoading;
using TaskLayer;
using Transcriptomics;
using MassSpectrometry;
using MzLibUtil;
using Transcriptomics.Digestion;
using UsefulProteomicsDatabases;

namespace Test.Transcriptomics;

[TestFixture]
public class SearchTaskWithRna
{
    public static RnaSearchParameters SearchParameters;
    public static CommonParameters CommonParameters;
    public static string SixmerSpectraFilePath = Path.Combine(TestContext.CurrentContext.TestDirectory, "Transcriptomics", "TestData", "GUACUG_NegativeMode_Sliced.mzML");
    public static string SixmerDatabaseFilePath = Path.Combine(TestContext.CurrentContext.TestDirectory, "Transcriptomics", "TestData", "6mer.fasta");

    [OneTimeSetUp]
    public static void Setup()
    {
        SearchParameters = new RnaSearchParameters
        {
            DecoyType = DecoyType.Reverse,
            MassDiffAcceptorType = MassDiffAcceptorType.Custom,
            CustomMdac = "Custom interval [-5,5]",
            DisposeOfFileWhenDone = true
        };
        CommonParameters = new CommonParameters
        (
            dissociationType: DissociationType.CID,
            deconvolutionMaxAssumedChargeState: -20,
            deconvolutionIntensityRatio: 3,
            deconvolutionMassTolerance: new PpmTolerance(20),
            precursorMassTolerance: new PpmTolerance(10),
            productMassTolerance: new PpmTolerance(5),
            scoreCutoff: 5,
            totalPartitions: 1,
            maxThreadsToUsePerFile: 1,
            doPrecursorDeconvolution: true,
            useProvidedPrecursorInfo: false,
            digestionParams: new RnaDigestionParams()
        );
    }

    [Test]
    public static void FindsSimpleSixmer()
    {
        List<DbForTask> dbForTask = [new(SixmerDatabaseFilePath, false)];
        List<string> rawFileList = [SixmerSpectraFilePath];
        string taskId = "RnaTestSearch";
        string outputDir = Path.Combine(TestContext.CurrentContext.TestDirectory, "Transcriptomics", "TestOutput");
        if (Directory.Exists(outputDir))
            Directory.Delete(outputDir, true);
        Directory.CreateDirectory(outputDir);


        var searchTask = new SearchTask
        {
            CommonParameters = CommonParameters,
            SearchParameters = SearchParameters
        };

        var results = searchTask.RunTask(outputDir, dbForTask, rawFileList, taskId);

        var files = Directory.GetFiles(outputDir);

        List<string> expectedOutputFiles =
        [
            Path.Combine(outputDir, "AllOligos.osmtsv"),
            Path.Combine(outputDir, "AllOSMs.osmtsv"),
            Path.Combine(outputDir, "AllOSMs_FormattedForPercolator.tab"),
            Path.Combine(outputDir, "results.txt"),
            Path.Combine(outputDir, "AutoGeneratedManuscriptProse.txt"),
            Path.Combine(outputDir, "AllTranscriptGroups.tsv"),
        ];

        foreach (var expectedFile in expectedOutputFiles)
        {
            Assert.That(files, Does.Contain(expectedFile), $"Expected output file {expectedFile} not found.");
        }
        // Directory.Delete(outputDir, true);
    }
}
